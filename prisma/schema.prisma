// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Topic {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(100)
  posts Post[]
}

model Post {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  topic     Topic      @relation(fields: [topicId], references: [id])
  topicId   Int
  content   String
  published Boolean    @default(false)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     PostLike[]
}

model PostLike {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  content   String
  author    User          @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post          @relation(fields: [postId], references: [id])
  postId    Int
  likes     CommentLike[]
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@unique([userId, commentId])
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  password     String        @db.VarChar(255)
  firstName    String        @db.VarChar(40)
  lastName     String?       @db.VarChar(40)
  posts        Post[]
  comments     Comment[]
  profile      Profile?
  postLikes    PostLike[]
  commentLikes CommentLike[]
  following    Follow[]      @relation("FollowFrom")
  followers    Follow[]      @relation("FollowTo")
  createdAt    DateTime      @default(now())
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("FollowFrom", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("FollowTo", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}
